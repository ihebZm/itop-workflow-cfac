<?php
//
// File generated by ... on the 2023-04-10T11:50:42+0200
// Please do not edit manually
//

/**
 * Classes and menus for itop-communications (version 1.2.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class Communication extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ref'),
			'image_attcode' => '',
			'state_attcode' => 'status',
			'reconc_keys' => array('org_id', 'org_name', 'ref'),
			'db_table' => 'communication',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, 'itop-communications//images/communication_90109793268989a4709622ad7341c32d.png'),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("ref", array("allowed_values"=>null, "sql"=>'ref', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("start_date", array("allowed_values"=>null, "sql"=>'start_date', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("end_date", array("allowed_values"=>null, "sql"=>'end_date', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("ongoing,closed"), "display_style"=>'list', "sql"=>'status', "default_value"=>'ongoing', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("icon", array("allowed_values"=>new ValueSetEnum("none,information,warning,tip,scoop"), "display_style"=>'list', "sql"=>'icon', "default_value"=>'none', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("title", array("allowed_values"=>null, "sql"=>'title', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeHTML("message", array("allowed_values"=>null, "sql"=>'message', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("organizations_list", array("linked_class"=>'lnkCommunicationToOrganization', "ext_key_to_me"=>'communication_id', "ext_key_to_remote"=>'org_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("org_match_type", array("allowed_values"=>new ValueSetEnum("direct,cascade"), "display_style"=>'list', "sql"=>'org_match_type', "default_value"=>'cascade', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));

		// Lifecycle (status attribute: status)
		//
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_close", array()));
		MetaModel::Init_DefineStimulus(new StimulusUserAction("ev_reopen", array()));
		MetaModel::Init_DefineState(
			"ongoing",
			array(
				"attribute_inherit" => '',
				"attribute_list" => array(
					'end_date' => OPT_ATT_NORMAL,
					'message' => OPT_ATT_MANDATORY,
					'org_id' => OPT_ATT_MANDATORY,
					'ref' => OPT_ATT_HIDDEN,
					'start_date' => OPT_ATT_MANDATORY,
					'end_date' => OPT_ATT_MUSTPROMPT,
				),
			)
		);
		MetaModel::Init_DefineTransition("ongoing", "ev_close", array(
            "target_state"=>"closed",
            "actions"=>array(array('verb' => 'SetCurrentDate', 'params' => array(array('type' => 'attcode', 'value' => "end_date")))),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));
		MetaModel::Init_DefineState(
			"closed",
			array(
				"attribute_inherit" => 'ongoing',
				"attribute_list" => array(
					'end_date' => OPT_ATT_READONLY,
					'message' => OPT_ATT_READONLY,
					'org_id' => OPT_ATT_READONLY,
					'start_date' => OPT_ATT_READONLY,
					'ref' => OPT_ATT_READONLY,
					'organizations_list' => OPT_ATT_READONLY,
					'org_match_type' => OPT_ATT_READONLY,
				),
			)
		);
		MetaModel::Init_DefineTransition("closed", "ev_reopen", array(
            "target_state"=>"ongoing",
            "actions"=>array(),
            "user_restriction"=>null,
            "attribute_list"=>array(
            )
        ));

		// Higlight Scale
		MetaModel::Init_DefineHighlightScale( array(
		));

		MetaModel::Init_SetZListItems('details', array (
  'col:col0' => 
  array (
    0 => 'ref',
    1 => 'org_id',
    2 => 'status',
    3 => 'start_date',
    4 => 'end_date',
    5 => 'org_match_type',
  ),
  'col:col1' => 
  array (
    0 => 'icon',
    1 => 'title',
    2 => 'message',
  ),
  0 => 'organizations_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ref',
  1 => 'org_id',
  2 => 'status',
  3 => 'start_date',
  4 => 'end_date',
  5 => 'icon',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'org_id',
  1 => 'start_date',
  2 => 'end_date',
  3 => 'status',
  4 => 'icon',
));
;
	}




    public function DBInsertNoReload()
    {
          // N°2407: Temp. backward compatibility with iTop 2.6 and older
          // Remove usage of iTopMutex / MetaModel::GetNextKey() in next functional version of the extension
          if (!is_callable(array('ItopCounter', 'IncClass')))
          {
            $oMutex = new iTopMutex('communication_insert');
            $oMutex->Lock();
            $iCounter = MetaModel::GetNextKey(get_class($this));
          }
          else
          {
            $iCounter = ItopCounter::IncClass(get_class($this));
          }

          $sRef = sprintf('COM-%06d', $iCounter);
          $this->Set('ref', $sRef);
          $iKey = parent::DBInsertNoReload();

          // N°2407: Temp. backward compatibility with iTop 2.6 and older
          // Remove usage of iTopMutex / MetaModel::GetNextKey() in next functional version of the extension
          if (!is_callable(array('ItopCounter', 'IncClass')))
          {
            $oMutex->Unlock();
          }

          return $iKey;
    }
        

	/**
	 * Override to filter the communications
	 * @param User $oUser User account to check
	 * @return bool
	 */
    public function IsUserInScope(User $oUser)
    {
		$oOrgSearch = DBSearch::FromOQL_AllData('SELECT lnkCommunicationToOrganization WHERE communication_id = :communication_id');
		$oOrgSet = new DBObjectSet($oOrgSearch, array(), array('communication_id' => $this->GetKey()));
		$aTargetOrgs = $oOrgSet->GetColumnAsArray('org_id');
		if (count($aTargetOrgs) == 0)
		{
			$bRet = true;
		}
		else
		{
			$iContact = $oUser->Get('contactid');
			$oContact = MetaModel::GetObject('Contact', $iContact, true, true);
			$iUserOrg = $oContact->Get('org_id');

			$sMatchType = $this->Get('org_match_type');
			if ($sMatchType == 'direct')
			{
				// Flat version
				$bRet = in_array($iUserOrg, $aTargetOrgs);
			}
			else // 'cascade'
			{
				// Is the user org below or within any of the target organizations
				$oOrgHierarchical = DBSearch::FromOQL_AllData('SELECT Organization AS child JOIN Organization AS root ON child.parent_id BELOW root.id WHERE root.id IN (:target_org_list) AND child.id = :contact_org_id');
				$oOrgHSet = new DBObjectSet($oOrgHierarchical, array(), array('contact_org_id' => $iUserOrg, 'target_org_list' => $aTargetOrgs));
				$bRet = $oOrgHSet->Count() > 0;
			}
		}
		return $bRet;
    }
        

	/**
	 * Override to change the icons
	 * @return string
	 */
    public function GetFontAwesomeIcon()
    {
		switch ($this->Get('icon'))
		{
			case 'information':
				$sIcon = 'info-circle';
				break;
			case 'warning':
				$sIcon = 'exclamation-triangle';
				break;
			case 'scoop':
				$sIcon = 'bullhorn';
				break;
			case 'tip':
				$sIcon = 'lightbulb';
				break;
			default:
				$sIcon = '';
		}
		return $sIcon;
    }
        


public function DoCheckToWrite()
  {
    parent::DoCheckToWrite();
    if ($this->Get('start_date') > $this->Get('end_date'))
    {
      $this->m_aCheckIssues[] = Dict::Format('Class:Communication/Error:EndDateMustBeGreaterThanStartDate');
    }
  }

}


class lnkCommunicationToOrganization extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array('communication_id', 'org_id'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('communication_id', 'org_id'),
			'db_table' => 'lnkcommunicationtoorganization',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("communication_id", array("targetclass"=>'Communication', "allowed_values"=>null, "sql"=>'communication_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("communication_ref", array("allowed_values"=>null, "extkey_attcode"=>'communication_id', "target_attcode"=>'ref', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'communication_id',
  1 => 'org_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'communication_id',
  1 => 'org_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'communication_id',
  1 => 'org_id',
));
;
	}


}
//
// Menus
//
class MenuCreation_itop_communications extends ModuleHandlerAPI
{
	public static function OnMenuCreation()
	{
		global $__comp_menus__; // ensure that the global variable is indeed global !
		$__comp_menus__['ServiceManagement'] = new MenuGroup('ServiceManagement', 60, 'fas fa-hands-helping' , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null);
		$__comp_menus__['Communication'] = new OQLMenuNode('Communication', "SELECT Communication WHERE status != \"closed\"", $__comp_menus__['ServiceManagement']->GetIndex(), 15, true , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null, true);
	}
} // class MenuCreation_itop_communications
