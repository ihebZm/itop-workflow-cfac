<?php
//
// File generated by ... on the 2023-04-10T11:50:42+0200
// Please do not edit manually
//

/**
 * Classes and menus for combodo-approval-extended (version 1.4.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class ExtendedApprovalScheme extends ApprovalScheme
{
	public static function Init()
	{
		$aParams = array(			'category' => '',
			'key_type' => 'autoincrement',
			'name_attcode' => array('obj_class', 'obj_key'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('label'),
			'db_table' => 'my_approval_scheme',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();



;
	}



	public static function GetApprovalScheme($oObject, $sReachingState)
	{
		$aExitConditionCodes = array(
			'first_reply' => ApprovalScheme::EXIT_ON_FIRST_REPLY,
			'first_reject' => ApprovalScheme::EXIT_ON_FIRST_REJECT,
			'first_approve' => ApprovalScheme::EXIT_ON_FIRST_APPROVE,
		);
		if ((get_class($oObject) != 'UserRequest'))
		{
			return null;
		}
		$sTargetState = MetaModel::GetConfig()->GetModuleSetting('combodo-approval-extended', 'target_state', 'new');
		if ($sReachingState != $sTargetState)
		{
			return null;
		}

		$sOQL = 'SELECT ApprovalRule AS ar JOIN ServiceSubcategory AS sc ON sc.approvalrule_id = ar.id WHERE sc.id = :servicesubcategory';
		$oApprovalRuleSet = new DBObjectSet(
			DBObjectSearch::FromOQL($sOQL),
			array(),
			array('servicesubcategory' => $oObject->Get('servicesubcategory_id'))
		);
		if ($oApprovalRuleSet->count() == 0)
		{
			// No approval rule applies to the current object
			return null;
		}

		$bReusePreviousAnswers = MetaModel::GetConfig()->GetModuleSetting('combodo-approval-extended', 'reuse_previous_answers', true);

		$oApprovalRule = $oApprovalRuleSet->fetch();
		$oScheme = new ExtendedApprovalScheme();

    $bStepAdded = false;

    $aStep1Data = static::GetStepDataFromApprovalRule($oApprovalRule, 1);
    if ($oScheme->AddStepFromQuery(
			$oObject,
			$aStep1Data['rule'],
			$aStep1Data['timeout'],
			$aStep1Data['default_approval'],
			$aExitConditionCodes[$aStep1Data['exit_condition']],
			$bReusePreviousAnswers,
			$aStep1Data['substitute_query'],
			$aStep1Data['substitute_timeout']
		))
		{
			$bStepAdded = true;
		}

    $aStep2Data = static::GetStepDataFromApprovalRule($oApprovalRule, 2);
		if ($oScheme->AddStepFromQuery(
			$oObject,
			$aStep2Data['rule'],
			$aStep2Data['timeout'],
			$aStep2Data['default_approval'],
			$aExitConditionCodes[$aStep2Data['exit_condition']],
			$bReusePreviousAnswers,
			$aStep2Data['substitute_query'],
			$aStep2Data['substitute_timeout']
		))
		{
			$bStepAdded = true;
		}

		if ($bStepAdded)
		{
			$oObject->ApplyStimulus('ev_wait_for_approval');
			return $oScheme;
		}
		else
		{
			return null;
		}
	}



	/**
   * @param \ApprovalScheme $oScheme
   * @param int $iLevel
   * @return array{rule: string, timeout: int, default_approval: boolean, exit_condition: string, substitute_query: string, substitute_timeout: int}
   */
	public static function GetStepDataFromApprovalRule($oApprovalRule, $iLevel)
	{
	  return [
	      'rule' => $oApprovalRule->Get("level{$iLevel}_rule"),
	      'timeout' => $oApprovalRule->Get("level{$iLevel}_timeout") * 3600,
	      'default_approval' => ($oApprovalRule->Get("level{$iLevel}_default_approval") == 'yes'),
	      'exit_condition' => $oApprovalRule->Get("level{$iLevel}_exit_condition"),
	      'substitute_query' => $oApprovalRule->Get("level{$iLevel}_substitute_query"),
	      'substitute_timeout' => $oApprovalRule->Get("level{$iLevel}_substitute_timeout"),
    ];
	}


	public function GetPublicObjectDetails($sContactClass, $iContactId)
	{
		$sBody = Dict::S('Approbation:PublicObjectDetails');
		return $sBody;

	}


	public function GetFormBody($sContactClass, $iContactId)
	{
		$sBody = Dict::S('Approbation:FormBody');
		return $sBody;

	}


	public function GetTitle($sContactClass, $iContactId)
	{
		$sValue = Dict::S('Approbation:ApprovalRequested');
		return $sValue;
	}


	public function GetIntroduction($sContactClass, $iContactId)
	{
		$sIntroduction = Dict::S('Approbation:Introduction');
		return $sIntroduction;
	}


	public function DoApprove(&$oObject)
	{
		$oObject->ApplyStimulus('ev_approve');
	}


	public function DoReject(&$oObject)
	{
		//$oObject->Set('reject_reason', "The change add been rejected");
		$oObject->ApplyStimulus('ev_reject');
	}


	protected function GetWorkingTimeComputer()
	{
		return 'ApprovalComputeWorkingHours';
	}


	public function IsAllowedToSeeObjectDetails($oApprover, $oObject)
            {
            if (is_null(UserRights::GetUserObject()))
            {
            // Not logged in
            return false;
            }
            return true;
            }

	/**
            * Overridable to implement the abort feature
            * @param oUser (implicitely the current user if null)	 
            * Return true if the given user is allowed to abort	 
            */
	public function IsAllowedToAbort($oUser = null)
	{
		if (is_null($oUser))
		{
			$oUser = UserRights::GetUserObject();
		}
		if (is_null($oUser))
		{
			return false;
		}

		$sAllowedProfiles = MetaModel::GetConfig()->GetModuleSetting('combodo-approval-extended', 'bypass_profiles', 'Administrator, Service Manager');
		$aAllowed = array();
		foreach (explode(',', $sAllowedProfiles) as $sProfileRaw)
		{
			$aAllowed[] = trim($sProfileRaw);
		}

		$oProfileSet = $oUser->Get('profile_list');
		while ($oProfile = $oProfileSet->Fetch())
		{
			$sProfileName = $oProfile->Get('profile');
			if (in_array($sProfileName, $aAllowed))
			{
				return true;
			}
		}
		return false;
	}

}


class ApprovalRule extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array('name'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('name'),
			'db_table' => 'approval_rule',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, 'combodo-approval-extended/images/rule.png'),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("name", array("allowed_values"=>null, "sql"=>'name', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeText("description", array("allowed_values"=>null, "sql"=>'description', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeOQL("level1_rule", array("allowed_values"=>null, "sql"=>'level1_rule', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("level1_default_approval", array("allowed_values"=>new ValueSetEnum("yes,no"), "display_style"=>'list', "sql"=>'level1_default_approval', "default_value"=>'no', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("level1_timeout", array("allowed_values"=>null, "sql"=>'level1_timeout', "default_value"=>'70', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("level1_exit_condition", array("allowed_values"=>new ValueSetEnum("first_reply,first_reject,first_approve"), "display_style"=>'list', "sql"=>'level1_exit_condition', "default_value"=>'first_reply', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeOQL("level1_substitute_query", array("allowed_values"=>null, "sql"=>'level1_substitute_query', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributePercentage("level1_substitute_timeout", array("allowed_values"=>null, "sql"=>'level1_substitute_timeout', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeOQL("level2_rule", array("allowed_values"=>null, "sql"=>'level2_rule', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("level2_default_approval", array("allowed_values"=>new ValueSetEnum("yes,no"), "display_style"=>'list', "sql"=>'level2_default_approval', "default_value"=>'no', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("level2_timeout", array("allowed_values"=>null, "sql"=>'level2_timeout', "default_value"=>'70', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("level2_exit_condition", array("allowed_values"=>new ValueSetEnum("first_reply,first_reject,first_approve"), "display_style"=>'list', "sql"=>'level2_exit_condition', "default_value"=>'first_reply', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeOQL("level2_substitute_query", array("allowed_values"=>null, "sql"=>'level2_substitute_query', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributePercentage("level2_substitute_timeout", array("allowed_values"=>null, "sql"=>'level2_substitute_timeout', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("servicesubcategory_list", array("linked_class"=>'ServiceSubcategory', "ext_key_to_me"=>'approvalrule_id', "count_min"=>0, "count_max"=>0, "edit_mode"=>LINKSET_EDITMODE_ADDREMOVE, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>LINKSET_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("coveragewindow_id", array("targetclass"=>'CoverageWindow', "allowed_values"=>null, "sql"=>'coveragewindow_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "allow_target_creation"=>false, "display_style"=>'select', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("coveragewindow_name", array("allowed_values"=>null, "extkey_attcode"=>'coveragewindow_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'servicesubcategory_list',
  'col:col1' => 
  array (
    'fieldset:ApprovalRule:baseinfo' => 
    array (
      0 => 'name',
      1 => 'description',
      2 => 'coveragewindow_id',
    ),
  ),
  'col:col3' => 
  array (
    'fieldset:ApprovalRule:Level2' => 
    array (
      0 => 'level2_rule',
      1 => 'level2_default_approval',
      2 => 'level2_timeout',
      3 => 'level2_exit_condition',
      4 => 'level2_substitute_query',
      5 => 'level2_substitute_timeout',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:ApprovalRule:Level1' => 
    array (
      0 => 'level1_rule',
      1 => 'level1_default_approval',
      2 => 'level1_timeout',
      3 => 'level1_exit_condition',
      4 => 'level1_substitute_query',
      5 => 'level1_substitute_timeout',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'description',
  2 => 'coveragewindow_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'description',
));
;
	}


}
//
// Menus
//
class MenuCreation_combodo_approval_extended extends ModuleHandlerAPI
{
	public static function OnMenuCreation()
	{
		global $__comp_menus__; // ensure that the global variable is indeed global !
		$__comp_menus__['ServiceManagement'] = new MenuGroup('ServiceManagement', 60, 'fas fa-hands-helping' , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null);
		$__comp_menus__['ApprovalRule'] = new OQLMenuNode('ApprovalRule', "SELECT ApprovalRule", $__comp_menus__['ServiceManagement']->GetIndex(), 15, true , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null, true);
		$__comp_menus__['RequestManagement'] = new MenuGroup('RequestManagement', 30, 'fas fa-comment-alt' , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null);
		$__comp_menus__['Ongoing approval'] = new WebPageMenuNode('Ongoing approval', utils::GetAbsoluteUrlAppRoot()."pages/exec.php?exec_module=approval-base&exec_page=report.php&class=UserRequest&do_filter_my_approvals=on", $__comp_menus__['RequestManagement']->GetIndex(), 6 , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null);
	}
} // class MenuCreation_combodo_approval_extended
